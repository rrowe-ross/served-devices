<?xml version="1.0" encoding="UTF-8"?><abs contexttype="opengear" id="_top" jsonport="5254" keepalive="false">
   <params>
      <param access="1" maxlength="0" name="SUPPLIER_NAME" oid="0x0102" stream="false" type="STRING" value="ROCKET SURGERY // ROSS VIDEO" widget="default"/>
      <param access="1" maxlength="0" name="PRODUCT_NAME" oid="0x0105" stream="false" type="STRING" value="SVR" widget="default"/>
      <param access="1" maxlength="0" name="PRODUCT_NAME_OVERRIDE" oid="0xFF01" stream="false" type="STRING" value="Server Panel" widget="text-display"/>
      <param access="1" constrainttype="INT_NULL" name="DISPLAY_OPTIONS" oid="0xFF0B" precision="0" stream="false" type="INT16_ARRAY" value="0;1" widget="default"/>
      <param access="1" maxlength="0" name="Tree URL" oid="0xFF0D" stream="false" type="STRING" value="eo://0x01" widget="text"/>
      <param access="1" maxlength="0" name="Device Icon" oid="0xFE06" stream="false" type="STRING" value="eo://0x2" widget="default"/>
      <param access="1" maxlength="0" name="Device Icon" oid="0xFF0C" stream="false" type="STRING" value="eo://0x2" widget="default"/>
      <param access="1" maxlength="0" name="000.SYS.HOST" oid="000.SYS.HOST" stream="true" type="STRING" value="192.168.0.5" widget="default"/>
      <param access="1" maxlength="0" name="000.SYS.PORT" oid="000.SYS.PORT" stream="true" type="STRING" value="5555" widget="default"/>
      <param access="1" constrainttype="INT_CHOICE" name="toggle.demo" oid="toggle.demo" precision="0" type="INT32" value="0" widget="radio-toggle">
         <constraint key="0">Ow</constraint>
         <constraint key="1">Now</constraint>
         <constraint key="2">Brown</constraint>
         <constraint key="3">Cow</constraint>
      </param>
   </params>
   <externalobjects>
      <eo oid="0x1" type="xml" url="tree-xml-server.xml"/>
      <eo oid="0x2" type="image-data" url="Images\RS_ICON_SMALL_ROUNDED_BGRD_16.png"/>
      <eo oid="0x3" type="image-data" url="Images\ross-r-radius-grey.png"/>
      <eo oid="0x10" type="xml" url="tree-xml-context.xml"/>
      <eo oid="0x11" type="xml" url="client-1.grid"/>
      <eo oid="0x12" type="xml" url="client-2.grid"/>
   </externalobjects>
   <context contexttype="opengear" dblinqport="2223" id="ctx" jsonport="5255" name="context">
      <params>
         <param access="1" maxlength="0" name="SUPPLIER_NAME" oid="0x0102" stream="false" type="STRING" value="ROCKET SURGERY // ROSS VIDEO" widget="default"/>
         <param access="1" constrainttype="INT_NULL" name="DISPLAY_OPTIONS" oid="0xFF0B" precision="0" stream="false" type="INT16_ARRAY" value="0;1" widget="default"/>
         <param access="1" maxlength="0" name="PRODUCT_NAME" oid="0x0105" stream="false" type="STRING" value="CTX" widget="default"/>
         <param access="1" maxlength="0" name="PRODUCT_NAME_OVERRIDE" oid="0xFF01" stream="false" type="STRING" value="Context Panel" widget="text-display"/>
         <param access="1" constrainttype="INT_CHOICE" name="toggle.demo" oid="toggle.demo" precision="0" type="INT32" value="2" widget="radio-toggle">
            <constraint key="0">Ow</constraint>
            <constraint key="1">Now</constraint>
            <constraint key="2">Brown</constraint>
            <constraint key="3">Cow</constraint>
         </param>
      </params>
   </context>
   <listener autostart="true" bottom="928" delimiter="0A" delimitertype="bytes" id="LST.PROXY" left="0" listenport="%value[000.SYS.PORT][0]%" right="115" top="0">
      <task tasktype="ogscript">var generateConnection = {
   frameList: {
      broadcastEquipment: function(id, name, host, port, image) {
         var data = '';

         data += '&lt;child&gt;\n';
         data += '&lt;entry key="serviceUrl"&gt;service:broadcast-equipment&lt;/entry&gt;\n';
         data += '&lt;entry key="equipmentType"&gt;opengear-json&lt;/entry&gt;\n';
         data += '&lt;entry key="address"&gt;' + host + '&lt;/entry&gt;\n';
         data += '&lt;entry key="port"&gt;' + port + '&lt;/entry&gt;\n';
         data += '&lt;entry key="node-name"&gt;' + name + '&lt;/entry&gt;\n';
         data += '&lt;entry key="node-id"&gt;' + id + '&lt;/entry&gt;\n';

         if ((image != '') &amp;&amp; (image != null)) {
            data += '&lt;entry key="node-image-url"&gt;' + image + '&lt;/entry&gt;\n';
         }
         data += '&lt;/child&gt;\n';

         return data;
      },

      carbonite: function(id, name, host, port, image) {
         var data = '';

         data += '&lt;child&gt;\n';
         data += '&lt;entry key="node-id"&gt;' + id + '&lt;/entry&gt;\n';
         data += '&lt;entry key="address"&gt;' + host + '&lt;/entry&gt;\n';
         //data += '&lt;entry key="port"&gt;' + port + '&lt;/entry&gt;\n';
         data += '&lt;entry key="port"&gt;5253&lt;/entry&gt;\n';
         data += '&lt;entry key="node-name"&gt;' + name + '&lt;/entry&gt;\n';
         data += '&lt;entry key="equipmentType"&gt;opengear&lt;/entry&gt;\n';
         //data += '&lt;entry key="rememberConnection"&gt;true&lt;/entry&gt;\n';
         data += '&lt;entry key="discoveryType"&gt;SLP&lt;/entry&gt;\n';

         if ((image != '') &amp;&amp; (image != null)) {
            data += '&lt;entry key="node-image-url"&gt;' + image + '&lt;/entry&gt;\n';
         }
         data += '&lt;/child&gt;\n';

         return data;
      },

      xpression: function(id, name, host, port, image) {
         var data = '';

         data += '&lt;child&gt;\n';
         //data += '\t&lt;connectionSettings discoveryType="MANUAL"&gt;\n';
         data += '\t&lt;entry key="node-id"&gt;' + id + '&lt;/entry&gt;\n';
         data += '\t&lt;entry key="access"&gt;full&lt;/entry&gt;\n';
         data += '\t&lt;entry key="address"&gt;' + host + '&lt;/entry&gt;\n';
         data += '\t&lt;entry key="port"&gt;' + port + '&lt;/entry&gt;\n';
         data += '\t&lt;entry key="node-name"&gt;' + name + '&lt;/entry&gt;\n';
         data += '\t&lt;entry key="slot"&gt;1&lt;/entry&gt;\n';
         data += '\t&lt;entry key="connectionType"&gt;TCP&lt;/entry&gt;\n';
         data += '\t&lt;entry key="discoveryType"&gt;MANUAL&lt;/entry&gt;\n';
         data += '\t&lt;entry key="equipmentType"&gt;xpression&lt;/entry&gt;\n';

         /*
         if ((image != '') &amp;&amp; (image != null)) {
            data += '\t\t&lt;entry key="node-image-url"&gt;' + image + '&lt;/entry&gt;\n';
         }
         */

         //data += '\t&lt;/connectionSettings&gt;\n';
         data += '&lt;/child&gt;\n';

         return data;
      },

      structure: function(id, name, url, image) {
         var data = '';

         data += '&lt;child&gt;\n';
         data += '&lt;entry key="equipmentType"&gt;structure&lt;/entry&gt;\n';
         data += '&lt;entry key="index-url"&gt;' + url + '&lt;/entry&gt;\n';
         data += '&lt;entry key="node-name"&gt;' + name + '&lt;/entry&gt;\n';
         data += '&lt;entry key="node-id"&gt;' + id + '&lt;/entry&gt;\n';

         if ((image != '') &amp;&amp; (image != null)) {
            data += '&lt;entry key="node-image-url"&gt;' + image + '&lt;/entry&gt;\n';
         }
         data += '&lt;/child&gt;\n';

         return data;
      },

      child: function(str) {
         var data = '';

         data += '&lt;child&gt;\n';
         data += str.replace('\n', '\n\t') + '\n';
         data += '&lt;/child&gt;\n';

         return data;
      },

      children: function(str) {
         var data = '';

         data += '&lt;children&gt;\n';
         data += str.replace('\n', '\n\t') + '\n';
         data += '&lt;/children&gt;\n';

         return data;
      },

      properties: function(str) {
         var data = '';

         data += '&lt;properties&gt;\n';
         data += str.replace('\n', '\n\t') + '\n';
         data += '&lt;/properties&gt;\n';

         return data;
      },

      xml: function(str) {
         var data = '';

         data += '&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n';
         data += str;

         return data;
      }
   },

   connectionProps: {
      base: function(host, port) {
         var data = '';

         data = '&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;\n';
         data += '&lt;properties&gt;\n';
         data += '\t&lt;children&gt;\n';
         data += '\t\t&lt;child&gt;\n';
         data += '\t\t\t&lt;entry key="equipmentType"&gt;structure&lt;/entry&gt;\n';
         data += '\t\t\t&lt;entry key="index-url"&gt;http://' + host + ':' + port + '/connect/frame-list.xml&lt;/entry&gt;\n';
         data += '\t\t\t&lt;entry key="node-id"&gt;sdp_struct&lt;/entry&gt;\n';
         data += '\t\t\t&lt;entry key="node-image-url"&gt;http://' + host + ':' + port + '/connect/icon.png&lt;/entry&gt;\n';
         data += '\t\t\t&lt;entry key="node-name"&gt;Rocket Surgery&lt;/entry&gt;\n';
         data += '\t\t&lt;/child&gt;\n';
         data += '\t&lt;/children&gt;\n';
         data += '&lt;/properties&gt;\n';

         return data;
      }
   },

   treeElement: {
      connectionSettings: function(str) {
            var data = '';

         data += '&lt;ConnectionSettingsTree&gt;\n';
         data += str + '\n';
         data += '&lt;/ConnectionSettingsTree&gt;';

         return data;
      },

      xml: function(str) {
         var data = '';

         data += '&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n';
         data += str;

         return data;
      },

      xpression: {
         base: function(str) {
            var data = '';

            data += '&lt;treeElement FactoryID="com.rossvideo.xpression.rice.tree.XPressionFrameFactory"&gt;\n';
            data += str + '\n';
            data += '&lt;/treeElement&gt;';

            return data;
         },

         dvc: function(id, name, host, port, image) {
            var data = '';

            data += '&lt;xpression&gt;\n';
            data += '\t&lt;connectionSettings discoveryType="MANUAL"&gt;\n';
            data += '\t\t&lt;attribute name="node-id" value="' + id + '"/&gt;\n';
            data += '\t\t&lt;attribute name="access" value="full"/&gt;\n';
            data += '\t\t&lt;attribute name="address" value="' + host + '"/&gt;\n';
            data += '\t\t&lt;attribute name="port" value="' + port + '"/&gt;\n';
            data += '\t\t&lt;attribute name="node-name" value="' + name + '"/&gt;\n';
            data += '\t\t&lt;attribute name="slot" value="1"/&gt;\n';
            data += '\t\t&lt;attribute name="connectionType" value="TCP"/&gt;\n';
            data += '\t\t&lt;attribute name="discoveryType" value="MANUAL"/&gt;\n';
            data += '\t\t&lt;attribute name="equipmentType" value="xpression"/&gt;\n';

            /*
            if ((image != '') &amp;&amp; (image != null)) {
               data += '\t\t&lt;entry key="node-image-url"&gt;' + image + '&lt;/entry&gt;\n';
            }
            */

            data += '\t&lt;/connectionSettings&gt;\n';
            data += '&lt;/xpression&gt;\n';

            return data;
         }
      }
   }
}

if (event.isMessageEvent()) {
   try {
      var responseText = null;
      var paramsGrp = '';
      var byteStr = event.getBytesAsString();
      var hostAddr = params.getValue('000.SYS.HOST', 0);
      var portInfo = params.getValue('000.SYS.PORT', 0);
      var contentType = 'text/xml';
      var responseCode = '200 OK';
      var imageFullPath = null;

      if (byteStr.indexOf('GET') == 0 || byteStr.indexOf('POST') == 0) {
         var pathStart = byteStr.indexOf('/');
         var pathEnd = byteStr.lastIndexOf(' ');

         if (pathStart &gt; 0 &amp;&amp; pathEnd &gt; 0 &amp;&amp; pathStart &lt; pathEnd) {
            var requestedGPI = unescape(byteStr.substring(pathStart + 1, pathEnd));
            //ogscript.debug('requestedGPI = "' + requestedGPI + '"');

            if (requestedGPI.includes('.png')) {
               contentType = 'image/png';
               imagePath = 'Images/';
               imageExt = '.png';

               // SEE IF THIS IS LEAGUE RELATED
               if (requestedGPI.toUpperCase().includes('LEAGUES/ICON')) {
                  var msgArr = null;
                  var leagueValue = null;

                  // SPLIT MESSAGE
                  msgArr = requestedGPI.split('/');

                  // GET THE IMAGE
                  leagueValue = msgArr[(msgArr.length - 1)];

                  // REMOVE THE EXTENSION
                  leagueValue = leagueValue.replace('.png', '');
               }
               // OTHERWISE, GO TO THE HARD-CODED FILE
               else {
                  if (requestedGPI == 'connect/icon.png') {
                     imageName = 'RS_ICON_SMALL';
                  }
                  else if (requestedGPI == 'connect/sle.png') {
                     imageName = 'sle-icon';
                  }
                  else if (requestedGPI == 'connect/ross.png') {
                     imageName = 'ross-r-red';
                  }
                  else if (requestedGPI == 'connect/rocket.png') {
                     imageName = 'RS_ICON_SMALL';
                  }
                  else if (requestedGPI == 'connect/cog.png') {
                     imageName = 'cog';
                  }
                  else if (requestedGPI == 'connect/devices.png') {
                     imageName = 'devices';
                  }
                  else if (requestedGPI == 'connect/cfl.png') {
                     imageName = 'strategy';
                  }
                  else if (requestedGPI == 'connect/lax.png') {
                     imageName = 'racquetball';
                  }
                  else if (requestedGPI == 'connect/mlb.png') {
                     imageName = 'baseball-bat';
                  }
                  else if (requestedGPI == 'connect/nba.png') {
                     imageName = 'basketball-hoop-outline';
                  }
                  else if (requestedGPI == 'connect/ncaa.png') {
                     imageName = 'school';
                  }
                  else if (requestedGPI == 'connect/nfl.png') {
                     imageName = 'football';
                  }
                  else if (requestedGPI == 'connect/nhl.png') {
                     imageName = 'hockey-sticks';
                  }
                  else if (requestedGPI == 'connect/soc.png') {
                     imageName = 'soccer';
                  }
                  else if (requestedGPI == 'connect/wnba.png') {
                     imageName = 'basketball';
                  }
                  else if (requestedGPI == 'connect/misc.png') {
                     imageName = 'dumbbell';
                  }
                  else if (requestedGPI == 'connect/monitor.png') {
                     imageName = 'monitor';
                  }
                  else if (requestedGPI == 'connect/xpn.png') {
                     imageName = 'xpn';
                  }
                  else if (requestedGPI == 'connect/projector-screen.png') {
                     imageName = 'projector-screen';
                  }

                  imageFullPath = imagePath + imageName + imageExt;
               }
            }

            if (requestedGPI == 'connect/frame-list.xml') {
               responseText = generateConnection.frameList.broadcastEquipment('SVR', 'Server', hostAddr, '5254', 'http://' + hostAddr + ':' + portInfo + '/connect/rocket.png');
               responseText += generateConnection.frameList.broadcastEquipment('CTX', 'Client', hostAddr, '5255', 'http://' + hostAddr + ':' + portInfo + '/connect/nhl.png');

               responseText = generateConnection.frameList.children(responseText);
               responseText = generateConnection.frameList.properties(responseText);
               responseText = generateConnection.frameList.xml(responseText);
            }

            else if (requestedGPI == 'connect/params/frame-list.xml') {
               responseText = generateConnection.frameList.broadcastEquipment('SVR', 'Server', hostAddr, '5254', 'http://' + hostAddr + ':' + portInfo + '/connect/rocket.png');
               responseText += generateConnection.frameList.broadcastEquipment('CTX', 'Client', hostAddr, '5255', 'http://' + hostAddr + ':' + portInfo + '/connect/nhl.png');

               responseText = generateConnection.frameList.children(paramsGrp);
               responseText = generateConnection.frameList.properties(responseText);
               responseText = generateConnection.frameList.xml(responseText);
            }
         }

         if (responseText == null) {
            responseText = generateConnection.frameList.structure('rocket', 'Rocket Surgery', 'http://' + hostAddr + ':' + portInfo + '/connect/frame-list.xml', 'http://' + hostAddr + ':' + portInfo + '/connect/ross.png');

            responseText = generateConnection.frameList.children(responseText);
            responseText = generateConnection.frameList.properties(responseText);
            responseText = generateConnection.frameList.xml(responseText);
         }

         // SEE IF ITS AN IMAGE
         if (contentType == 'image/png') {
            var input = ogscript.createFileInput(imageFullPath);
            try {
               this.writeString('HTTP/1.1 200 OK\r\n', false);
               this.writeString('Content-Type: ' + contentType + ';\r\n', false);
               this.writeString('Connection: close\r\n', false);
               this.writeString('Content-Length: ' + input.getSize() + '\r\n\r\n', false);
               this.writeBytes(input.readBytes(input.getSize()));
               input.close();
            }
            catch (e) {
               responseText = 'Error processing the request.\n' + e;

               // CONVERT TO A MESSAGE BUILDER FOR LENGTH
               var mb = ogscript.createMessageBuilder();
               mb.writeString(responseText);

               this.writeString('HTTP/1.1 500\r\n', false);
               this.writeString('Content-Type: text/html; charset=utf-8\r\n', false);
               this.writeString('Content-Length: ' + mb.toByteArray().length + '\r\n', false);
               this.writeString('Connection: close\r\n\r\n', false);

               input.close();
            }
         }
         // OTHERWISE, ASSUME ITS TEXT
         else {
            // CONVERT TO A MESSAGE BUILDER FOR LENGTH
            var mb = ogscript.createMessageBuilder();
            mb.writeString(responseText);
            
            this.writeString('HTTP/1.1 ' + responseCode + '\r\n', false);
            this.writeString('Content-Type: ' + contentType + '; charset=utf-8\r\n', false);
            this.writeString('Content-Length: ' + mb.toByteArray().length + '\r\n', false);
            this.writeString('Connection: close\r\n\r\n', false);
            this.writeString(responseText, false);
         }
      }
   }
   catch (e) {
      ogscript.debug('Error processing request:\n' + e);
      responseText = 'Error processing the request.\n' + e;

      // CONVERT TO A MESSAGE BUILDER FOR LENGTH
      var mb = ogscript.createMessageBuilder();
      mb.writeString(responseText);

      this.writeString('HTTP/1.1 500\r\n', false);
      this.writeString('Content-Type: text/html; charset=utf-8\r\n', false);
      this.writeString('Content-Length: ' + mb.toByteArray().length + '\r\n', false);
      this.writeString('Connection: close\r\n\r\n', false);
      this.writeString(responseText, false);
   }
}</task>
   </listener>
   <abs height="110" left="5" top="5" width="195">
      <label height="30" left="5" name="Server Info" right="5" style="txt-align:center;" top="5"/>
      <simplegrid bottom="5" cols="2" hspace="5" left="5" right="5" rows="2" top="40" vspace="5">
         <label name="Host:" style="txt-align:east"/>
         <param expand="true" oid="000.SYS.HOST" showlabel="false"/>
         <label name="Port:" style="txt-align:east"/>
         <param expand="true" oid="000.SYS.PORT" showlabel="false"/>
      </simplegrid>
   </abs>
   <abs height="75" left="5" top="115" width="295">
      <label height="30" left="5" name="Local Params" right="5" style="txt-align:center;" top="5"/>
      <param bottom="5" expand="true" left="5" oid="toggle.demo" right="5" showlabel="false" top="40"/>
   </abs>
   <abs height="75" left="5" top="195" width="295">
      <label height="30" left="5" name="Global/Context Params" right="5" style="txt-align:center;" top="5"/>
      <param bottom="5" contextid="ctx" expand="true" left="5" oid="toggle.demo" right="5" showlabel="false" top="40"/>
   </abs>
</abs>
